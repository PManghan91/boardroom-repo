{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(pytest:*)",
      "Bash(npm ls:*)",
      "Bash(pip install:*)",
      "Bash(bandit:*)",
      "Bash(uv:*)",
      "Bash(mkdir:*)",
      "Bash(grep:*)",
      "Bash(npm install:*)",
      "Bash(npm test)",
      "Bash(npm run test:coverage:*)",
      "Bash(rm:*)",
      "Bash(npm run lint)",
      "Bash(npm run type-check:*)",
      "Bash(npm run build:*)",
      "Bash(timeout 5 uv run:*)",
      "Bash(timeout:*)",
      "Bash(npx tsc:*)",
      "Bash(chmod:*)",
      "Bash(./fix_frontend_errors.sh:*)",
      "Bash(./fix_remaining_frontend_errors.sh:*)",
      "Bash(make test:*)",
      "Bash(python -m pytest tests/unit/test_auth_utils.py::TestCreateAccessToken::test_create_access_token_with_default_expiry -v)",
      "Bash(python3 -m pytest tests/unit/test_auth_utils.py::TestCreateAccessToken::test_create_access_token_with_default_expiry -v)",
      "Bash(python3 -m pytest tests/unit/test_auth_utils.py -v)",
      "Bash(python3 -m pytest tests/unit/test_auth_utils.py::TestCreateAccessToken::test_create_access_token_includes_sanitized_jti -v -s)",
      "Bash(python3:*)",
      "Bash(pip3 install:*)",
      "Bash(.venv/bin/pip install:*)",
      "Bash(.venv/bin/python -m pip install:*)",
      "Bash(./run_all_tests.py --skip-lint --skip-types --skip-deps)",
      "Bash(./run_all_tests.py --skip-lint --skip-types --skip-deps --backend-only)",
      "Bash(./simple_test_runner.sh:*)",
      "Bash(python -m pytest tests/unit -v --tb=short)",
      "Bash(python -m pytest tests/unit/test_database_service.py -v --tb=short)",
      "Bash(make:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "WebFetch(domain:localhost)",
      "Bash(alembic current:*)",
      "Bash(python:*)",
      "Bash(systemctl status:*)",
      "Bash(service postgresql:*)",
      "Bash(pg_isready:*)",
      "Bash(psql:*)",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c \"\\dt\")",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c \"SELECT * FROM alembic_version;\")",
      "Bash(alembic:*)",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -f schema_new.sql)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(sudo systemctl status:*)",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\l')",
      "Bash(kill:*)",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\dt')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\d users')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\d boardrooms')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\d threads')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\d decision')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c '\\d vote')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c 'SELECT COUNT(*) FROM users;')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c 'SELECT COUNT(*) FROM boardrooms;')",
      "Bash(rg:*)",
      "Bash(ss:*)",
      "Bash(docker logs:*)",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c 'SELECT id, email, full_name, is_active, is_verified, created_at FROM users;')",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c 'SELECT email, full_name, created_at FROM users ORDER BY created_at;')",
      "Bash(docker restart:*)",
      "Bash(PGPASSWORD=boardroom123 psql -h localhost -p 5432 -U boardroom -d boardroom_dev -c 'SELECT email, full_name, is_active, is_verified, created_at FROM users ORDER BY created_at DESC LIMIT 5;')",
      "Bash(PGPASSWORD=boardroom123 psql:*)",
      "Bash(npm run dev:*)",
      "Bash(sed:*)",
      "Bash(playwright install)",
      "Bash(mv:*)",
      "Bash(npm:*)",
      "Bash(# Add exports to all widget components that don''t have them\nfor file in /home/paul/boardroom-repo/frontend/src/components/widgets/*.tsx; do\n  basename_file=$(basename \"\"$file\"\" .tsx)\n  # Check if file ends with just \"\"}\"\" and doesn''t have export\n  if tail -1 \"\"$file\"\" | grep -q \"\"^}$\"\" && ! grep -q \"\"export default\"\" \"\"$file\"\"; then\n    echo \"\"Adding export to $basename_file\"\"\n    echo \"\"\"\" >> \"\"$file\"\"\n    echo \"\"export default $basename_file;\"\" >> \"\"$file\"\"\n  fi\ndone\n\n# Do the same for widgets in src/widgets/\nfor file in /home/paul/boardroom-repo/frontend/src/widgets/*.tsx; do\n  basename_file=$(basename \"\"$file\"\" .tsx)\n  # Check if file ends with just \"\"}\"\" and doesn''t have export\n  if tail -1 \"\"$file\"\" | grep -q \"\"^}$\"\" && ! grep -q \"\"export default\"\" \"\"$file\"\"; then\n    echo \"\"Adding export to $basename_file\"\"\n    echo \"\"\"\" >> \"\"$file\"\"\n    echo \"\"export default $basename_file;\"\" >> \"\"$file\"\"\n  fi\ndone)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_success -v)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_success -v -s)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_success -v)",
      "Bash(time python3 -m pytest:*)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_success -v -s)",
      "Bash(ENVIRONMENT=test python3 -c \"from app.core.langgraph.graph import LangGraphAgent; agent = LangGraphAgent(); print(''Graph:'', agent.graph)\")",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py -v --tb=short)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_degraded_performance -v -s)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_error_handling -v -s)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_ai_health_check_error_handling -v)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py -v --tb=line)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_get_active_sessions_success -v -s)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_get_active_sessions_success -v -s --capture=no)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_ai_operations_endpoints.py::TestAIOperationsEndpoints::test_get_active_sessions_success -v)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/ -v --tb=no)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_api_standards.py -v --tb=line)",
      "Bash(OPENAI_API_KEY=\"sk-test-key\" LLM_API_KEY=\"sk-test-key\" JWT_SECRET_KEY=\"test-secret-key\" python3 -m pytest tests/integration/test_api_standards.py::TestAPIStandards::test_standard_headers_present -v -s)",
      "Bash(env)",
      "Bash(sudo service:*)",
      "Bash(cp:*)",
      "Bash(./feature_validation_test.sh:*)",
      "Bash(docker exec:*)",
      "Bash(./final-integration-start.sh:*)",
      "Bash(redis-cli:*)",
      "Bash(for port in 3000 3001 3002)",
      "Bash(do lsof:*)",
      "Bash(/dev/null)",
      "Bash(done)",
      "Bash(for:*)",
      "Bash(do fuser -k $port/tcp)",
      "Bash(screen:*)",
      "Bash(./feature_validation_detailed.sh:*)",
      "Bash(wget:*)",
      "Bash(./quick-start-final.sh:*)",
      "Bash(node:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh auth:*)"
    ],
    "deny": []
  }
}